Joshua Mitchell and Ruchelly Almeida
Comp 40 - Spring 2018
Homework 7

We had help from various Ta's

Assembly Code Analysis:

Using valgrind and kcachegrind we found the part of our program that took the 
most time was execute_instr function within the um module.

The execute_instr function takes a 32 bit instruction, a boolean that is true
if the program is supposed to stop, a uint32_t representing the current
instruction to execute, a memory struct representing memory as a whole, and an
array of uint32_t's representing the registers. As the name implies, the
purpose of the function is to execute instructions. It does so by calling 
Bitpack_getu to get the opcode of each instruction and using a switch statement
to call various functions depending on the opcode.

The assembly code for execute_instr can be seen below:

0000000000000140 <execute_instr>:
 140:	48 89 f8             	mov    %rdi,%rax
 143:	49 89 c9             	mov    %rcx,%r9
 146:	48 c1 e0 20          	shl    $0x20,%rax
 14a:	48 c1 e8 3c          	shr    $0x3c,%rax
 14e:	83 f8 0d             	cmp    $0xd,%eax
 151:	0f 87 d9 00 00 00    	ja     230 <execute_instr+0xf0>
 157:	ff 24 c5 00 00 00 00 	jmpq   *0x0(,%rax,8)
 15e:	66 90                	xchg   %ax,%ax
 160:	48 89 d1             	mov    %rdx,%rcx
 163:	4c 89 c6             	mov    %r8,%rsi
 166:	4c 89 ca             	mov    %r9,%rdx
 169:	e9 00 00 00 00       	jmpq   16e <execute_instr+0x2e>
 16e:	66 90                	xchg   %ax,%ax
 170:	4c 89 c6             	mov    %r8,%rsi
 173:	e9 00 00 00 00       	jmpq   178 <execute_instr+0x38>
 178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 17f:	00 
 180:	4c 89 c6             	mov    %r8,%rsi
 183:	e9 00 00 00 00       	jmpq   188 <execute_instr+0x48>
 188:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 18f:	00 
 190:	48 89 ca             	mov    %rcx,%rdx
 193:	4c 89 c6             	mov    %r8,%rsi
 196:	e9 00 00 00 00       	jmpq   19b <execute_instr+0x5b>
 19b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 1a0:	48 89 ca             	mov    %rcx,%rdx
 1a3:	4c 89 c6             	mov    %r8,%rsi
 1a6:	e9 00 00 00 00       	jmpq   1ab <execute_instr+0x6b>
 1ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 1b0:	4c 89 c6             	mov    %r8,%rsi
 1b3:	e9 00 00 00 00       	jmpq   1b8 <execute_instr+0x78>
 1b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 1bf:	00 
 1c0:	4c 89 c6             	mov    %r8,%rsi
 1c3:	e9 00 00 00 00       	jmpq   1c8 <execute_instr+0x88>
 1c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 1cf:	00 
 1d0:	4c 89 c6             	mov    %r8,%rsi
 1d3:	e9 00 00 00 00       	jmpq   1d8 <execute_instr+0x98>
 1d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 1df:	00 
 1e0:	4c 89 c6             	mov    %r8,%rsi
 1e3:	e9 00 00 00 00       	jmpq   1e8 <execute_instr+0xa8>
 1e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 1ef:	00 
 1f0:	c6 06 01             	movb   $0x1,(%rsi)
 1f3:	c3                   	retq   
 1f4:	0f 1f 40 00          	nopl   0x0(%rax)
 1f8:	48 89 ca             	mov    %rcx,%rdx
 1fb:	4c 89 c6             	mov    %r8,%rsi
 1fe:	e9 00 00 00 00       	jmpq   203 <execute_instr+0xc3>
 203:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 208:	48 89 ca             	mov    %rcx,%rdx
 20b:	4c 89 c6             	mov    %r8,%rsi
 20e:	e9 00 00 00 00       	jmpq   213 <execute_instr+0xd3>
 213:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 218:	4c 89 c6             	mov    %r8,%rsi
 21b:	e9 00 00 00 00       	jmpq   220 <execute_instr+0xe0>
 220:	4c 89 c6             	mov    %r8,%rsi
 223:	e9 00 00 00 00       	jmpq   228 <execute_instr+0xe8>
 228:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 22f:	00 
 230:	f3 c3                	repz retq 
 232:	0f 1f 40 00          	nopl   0x0(%rax)
 236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 23d:	00 00 00 

The assembly code before the switch statement starting at 157, is the function 
call of Bitpack_getu. It isn't shown as a function call because it was inlined
for performance.

After thorough analysis of the assembly code of the switch statement, we
concluded that there weren't very many changes that could be done to improve
it.

In our analysis, we first thought that the assembly code with the instructions
nop and nopl were useless and possibly bad for performance. However, after
further consideration and research, we determined that these instructions were
necessary for memory alignment.

The next step in our analysis was determining whether or not the way that
the xchg instruction was being called was useful or not. In the assembly code
at 15e and 16e, the instruction "xchg %ax,%ax" was called. Our first thought
was that this was a useless instruction because exchanging the contents of
one register with itself wouldn't change the contents of the register. 
After further research, we found that this seemingly useless instruction served
a similar purpose as the nop instruction.

The final step in our analysis was to look at the assembly code corresponding 
to each case in the switch statement. What we found for the most part made
sense. In each case the parameters corresponding to the function calls in each
case were loaded into the correct registers for the function calls. There were,
however, some areas where we thought instructions were being called needlessly
and a small fix that could make the assembly code more compact.

The instruction calls that we believe to be unecessary occurred in the case
in the switch statement corresponding to the map instruction for the UM. The
reason we determined there were unecessary instruction calls was because for
all the other cases where the instruction, register array, and memory struct
were parameters of the functions being called in the case, the same type and
number of instructions called were the same (ignoring nop & nopl). In the map
case, however, there were instructions that moved the constant 1 into register
%rsi and returned something; both of which seemed unecessary.

The small fix that we belive could make the assembly code more compact would
be to pull out an instruction that occurs within every case of the switch
statement. Within every case, the instruction "mov %r8,%rsi" occurs. This is
loading the value of the 5th parameter, the register array, into register
%rsi so that it can be passed as the second argument for the function calls
in the switch statement. Since this occurs in every case, it should be pulled
out of the switch statement so that it is only called once.


We have spent 3 hours analysing problems posed in the assignment.

We have spent 17 hours solving the problems after analysing it.
